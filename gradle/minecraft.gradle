// Shared Gradle configuration for the Sponge ForgeGradle projects

ext.api = common.project('SpongeAPI')
ext.testPlugins = common.project('testplugins')

// Finish configuring SpongeAPI first
evaluationDependsOn api.path

// Apply shared Gradle configuration in SpongeAPI
apply from: api.file('gradle/sponge.gradle')

// Apply ForgeGradle plugin
//apply plugin: forgeGradlePlugin

// Apply MixinGradle plugin to project
//apply plugin: 'org.spongepowered.mixin'

dependencies {
    testCompile 'org.spongepowered:lwts:1.0.0'
    compile(project(':clean'))
}

project(':mcp') {
    apply plugin: 'net.minecraftforge.gradle.forgedev.mcp'
    mcp {
        config = 'de.oceanlabs.mcp:mcp_config:1.13.1@zip'
        pipeline = 'joined'
    }
}


project(':clean') {
    evaluationDependsOn(':mcp')
    apply plugin: 'eclipse'
    apply plugin: 'net.minecraftforge.gradle.forgedev.patcher'
    repositories {
        mavenCentral()
    }

    patcher {
        parent = project(':mcp')
        patchedSrc = file('src/main/java')
        accessTransformer = common.file('src/main/resources/META-INF/common_at.cfg')
        mappings channel: 'snapshot', version: "20190123-1.13.1"
        mcVersion = "1.13.1"
    }
}
task setup() {
    dependsOn 'clean:extractMapped'
}



// Mixins
sourceSets {
    main {
        ext.refMap = "mixins.${implementation.toLowerCase()}.refmap.json"
    }
}

// Java 6 source set for compatibility checking
sourceSets {
    java6
}

// Compile options
compileJava {
    options.compilerArgs += '-Xlint:-processing'
}

compileJava6Java {
    sourceCompatibility = '1.6'
    targetCompatibility = '1.6'
}

// The access transformers we use
ext.ats = ['common_at.cfg']

// Set manifest entries
jar {
    // Include Java 6 classes
    from sourceSets.java6.output

    manifest {
        attributes(
                'Implementation-Title': project.name,
                'Implementation-Version': "${-> project.version}",
                'Implementation-Vendor': project.organization,

                'Specification-Version': "${-> common.apiVersion}",

                'FMLAT': "${-> project.ats.join(' ')}"
        )
    }
}

// Don't upload temp jar to Maven repository
//configurations.archives.artifacts.removeAll { it.archiveTask.is jar }

task devJar(type: Jar) {
    classifier = 'dev'
    duplicatesStrategy = 'exclude' // Exclude duplicate LICENSE.txt file

    // Inherit manifest from jar
    manifest.from jar.manifest

    // Include classes
    from sourceSets.main.output
    from sourceSets.java6.output

    // Include API
    from api.sourceSets.main.output
    from api.sourceSets.ap.output
    from api.tasks.genEventImpl
}

artifacts {
    // Upload dev jar to Maven repository
    archives devJar
}

task sourceJar(type: Jar, overwrite: true) {
    classifier = 'sources'

    // Include sources
    from sourceSets.main.allSource
    from sourceSets.java6.allSource

    // Include SpongeAPI sources in source jar
    from api.sourceSets.main.allSource
    from api.sourceSets.ap.allSource
}

artifacts {
    // Upload source jar to Maven repository
    archives sourceJar
}

// Include SpongeAPI/SpongeCommon dependencies in our POM
// Note: This is ugly, just keep scrolling
uploadArchives.repositories.mavenDeployer.pom.whenConfigured {
    dependencies.removeAll { it.artifactId == shadedDevProject.archivesBaseName }
    def deps = new HashSet(dependencies.collect { it.groupId + ':' + it.artifactId })
    dependencies.addAll(shadedDevProject.uploadArchives.repositories.mavenDeployer.pom.effectivePom.dependencies.findAll {
        !deps.contains(it.groupId + ':' + it.artifactId) // Don't add the same dependency several times to the POM
    })
}

configure([jar, devJar]) {
    // Append API revision to the SpongeAPI version
    dependsOn common.resolveApiRevision
}

test {
    workingDir = {test.temporaryDir}
    systemProperty 'mixin.env.disableRefMap', 'true'
}


// Code style configuration
//sortAccessTransformers {
//    add sourceSets.main
//}

license {
    ext.name = 'Sponge'
}

// Use checkstyle suppressions from Common
checkstyle {
    configProperties['suppressions'] = common.file('checkstyle-suppressions.xml')
}
